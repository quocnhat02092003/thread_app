import * as React from "react";
import {
  Box,
  Typography,
  FormControlLabel,
  Switch,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
} from "@mui/material";
// import { Notifications as NotificationsIcon } from "@mui/icons-material";

interface NotificationSettings {
  emailNotifications: boolean;
  pushNotifications: boolean;
  smsNotifications: boolean;
  marketingEmails: boolean;
  securityAlerts: boolean;
  friendRequests: boolean;
  comments: boolean;
  mentions: boolean;
  newFollowers: boolean;
}

interface NotificationsTabProps {
  settings: NotificationSettings;
  onSettingsChange: (settings: NotificationSettings) => void;
}

const NotificationsTab: React.FC<NotificationsTabProps> = ({
  settings,
  onSettingsChange,
}) => {
  const [localSettings, setLocalSettings] =
    React.useState<NotificationSettings>(settings);

  React.useEffect(() => {
    setLocalSettings(settings);
  }, [settings]);

  const handleSettingChange =
    (setting: keyof NotificationSettings) =>
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const newSettings = {
        ...localSettings,
        [setting]: event.target.checked,
      };
      setLocalSettings(newSettings);
      onSettingsChange(newSettings);
    };

  const notificationSections = [
    {
      title: "Ph∆∞∆°ng th·ª©c th√¥ng b√°o",
      items: [
        {
          key: "emailNotifications" as keyof NotificationSettings,
          label: "Th√¥ng b√°o qua email",
          description: "Nh·∫≠n th√¥ng b√°o qua ƒë·ªãa ch·ªâ email c·ªßa b·∫°n",
        },
        {
          key: "pushNotifications" as keyof NotificationSettings,
          label: "Th√¥ng b√°o ƒë·∫©y",
          description: "Nh·∫≠n th√¥ng b√°o tr·ª±c ti·∫øp tr√™n thi·∫øt b·ªã",
        },
        {
          key: "smsNotifications" as keyof NotificationSettings,
          label: "Th√¥ng b√°o SMS",
          description: "Nh·∫≠n th√¥ng b√°o qua tin nh·∫Øn SMS",
        },
      ],
    },
    {
      title: "Lo·∫°i th√¥ng b√°o",
      items: [
        {
          key: "securityAlerts" as keyof NotificationSettings,
          label: "C·∫£nh b√°o b·∫£o m·∫≠t",
          description: "Th√¥ng b√°o v·ªÅ ho·∫°t ƒë·ªông ƒëƒÉng nh·∫≠p v√† b·∫£o m·∫≠t",
        },
        {
          key: "friendRequests" as keyof NotificationSettings,
          label: "L·ªùi m·ªùi k·∫øt b·∫°n",
          description: "Th√¥ng b√°o khi c√≥ ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n",
        },
        {
          key: "comments" as keyof NotificationSettings,
          label: "B√¨nh lu·∫≠n",
          description: "Th√¥ng b√°o khi c√≥ ng∆∞·ªùi b√¨nh lu·∫≠n b√†i vi·∫øt c·ªßa b·∫°n",
        },
        {
          key: "mentions" as keyof NotificationSettings,
          label: "Nh·∫Øc ƒë·∫øn",
          description: "Th√¥ng b√°o khi c√≥ ng∆∞·ªùi nh·∫Øc ƒë·∫øn b·∫°n",
        },
        {
          key: "newFollowers" as keyof NotificationSettings,
          label: "Ng∆∞·ªùi theo d√µi m·ªõi",
          description: "Th√¥ng b√°o khi c√≥ ng∆∞·ªùi theo d√µi b·∫°n",
        },
      ],
    },
    {
      title: "Marketing",
      items: [
        {
          key: "marketingEmails" as keyof NotificationSettings,
          label: "Email marketing",
          description: "Nh·∫≠n email v·ªÅ s·∫£n ph·∫©m m·ªõi v√† khuy·∫øn m√£i",
        },
      ],
    },
  ];

  return (
    <Box display="flex" flexDirection="column" gap={3} sx={{ pt: 2 }}>
      <Typography variant="h6" display="flex" alignItems="center" gap={1}>
        {/* <NotificationsIcon />  */}
        C√†i ƒë·∫∑t th√¥ng b√°o
      </Typography>

      {notificationSections.map((section, sectionIndex) => (
        <Box key={section.title}>
          <Typography variant="subtitle1" fontWeight="bold" mb={1}>
            {section.title}
          </Typography>

          <List disablePadding>
            {section.items.map((item, itemIndex) => (
              <ListItem key={item.key} disablePadding>
                <ListItemText
                  primary={item.label}
                  secondary={item.description}
                />
                <ListItemSecondaryAction>
                  <Switch
                    checked={localSettings[item.key]}
                    onChange={handleSettingChange(item.key)}
                    color="primary"
                  />
                </ListItemSecondaryAction>
              </ListItem>
            ))}
          </List>

          {sectionIndex < notificationSections.length - 1 && (
            <Divider sx={{ my: 2 }} />
          )}
        </Box>
      ))}

      <Box mt={2} p={2} bgcolor="grey.50" borderRadius={1}>
        <Typography variant="body2" color="text.secondary">
          üí° <strong>M·∫πo:</strong> B·∫°n c√≥ th·ªÉ t·∫Øt t·∫•t c·∫£ th√¥ng b√°o b·∫±ng c√°ch t·∫Øt
          "Th√¥ng b√°o ƒë·∫©y" v√† "Th√¥ng b√°o qua email". Tuy nhi√™n, ch√∫ng t√¥i khuy√™n
          b·∫°n n√™n gi·ªØ "C·∫£nh b√°o b·∫£o m·∫≠t" ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n t√†i kho·∫£n.
        </Typography>
      </Box>
    </Box>
  );
};

export default NotificationsTab;
